{
  "name": "bookshelf-api",
  "version": "1.0.0",
  "description": "1. API harus dapat menyimpan buku melalui route: <br/> Method : POST <br/> URL : /books <br/> Body Request: <br/> ```javascript     {         \"name\": string,         \"year\": number,         \"author\": string,         \"summary\": string,         \"publisher\": string,         \"pageCount\": number,         \"readPage\": number,         \"reading\": boolean     } ``` 2. Objek buku yang disimpan pada server harus memiliki struktur seperti contoh di bawah ini: <br/>  ```javascript     {         \"id\": \"Qbax5Oy7L8WKf74l\",         \"name\": \"Buku A\",         \"year\": 2010,         \"author\": \"John Doe\",         \"summary\": \"Lorem ipsum dolor sit amet\",         \"publisher\": \"Dicoding Indonesia\",         \"pageCount\": 100,         \"readPage\": 25,         \"finished\": false,         \"reading\": false,         \"insertedAt\": \"2021-03-04T09:11:44.598Z\",         \"updatedAt\": \"2021-03-04T09:11:44.598Z\"     } ``` 3. Properti yang ditebalkan diolah dan didapatkan di sisi server. Berikut penjelasannya: <br/><br/>     id : nilai id haruslah unik. Untuk membuat nilai unik, Anda bisa memanfaatkan nanoid. <br/><br/>     finished : merupakan properti boolean yang menjelaskan apakah buku telah selesai dibaca atau belum. Nilai finished didapatkan dari observasi pageCount === readPage. <br/><br/>     insertedAt : merupakan properti yang menampung tanggal dimasukkannya buku. Anda bisa gunakan new Date().toISOString() untuk menghasilkan nilainya. <br/><br/>     updatedAt : merupakan properti yang menampung tanggal diperbarui buku. Ketika buku baru dimasukkan, berikan nilai properti ini sama dengan insertedAt. <br/><br/> 4. Server harus merespons gagal bila:\\     - Client tidak melampirkan properti namepada request body. Bila hal ini terjadi, maka server akan merespons dengan: <br/>         Status Code : 400 <br/>         Response Body: <br/> ```javascript         { \t   \"status\": \"fail\", \t   \"message\": \"Gagal menambahkan buku. Mohon isi nama buku\"     \t} ``` \\     - Client melampirkan nilai properti readPage yang lebih besar dari nilai properti pageCount. Bila hal ini terjadi, maka server akan merespons dengan: <br/>     \tStatus Code : 400 <br/> \tResponse Body: <br/> ```javascript \t{ \t  \"status\": \"fail\", \t  \"message\": \"Gagal menambahkan buku. readPage tidak boleh lebih besar dari pageCount\"     \t} ``` \\     - Server gagal memasukkan buku karena alasan umum (generic error). Bila hal ini terjadi, maka server akan merespons dengan: <br/>     \tStatus Code : 500 <br/>     \tResponse Body: <br/> ```javascript     \t{            \"status\": \"error\",            \"message\": \"Buku gagal ditambahkan\"     \t} ``` 5. Bila buku berhasil dimasukkan, server harus mengembalikan respons dengan: \\     Status Code : 201 <br/>     Response Body: <br/> ```javascript     {         \"status\": \"success\",         \"message\": \"Buku berhasil ditambahkan\",         \"data\": {             \"bookId\": \"1L7ZtDUFeGs7VlEt\"         }     } ``` ## Kriteria 2 : API dapat menampilkan seluruh buku 1. API  harus dapat menampilkan seluruh buku yang disimpan melalui route: <br/>     Method : GET <br/>     URL: /books <br/><br/> 2. Server harus mengembalikan respons dengan: <br/>     Status Code : 200 <br/>     Response Body: <br/> ```javascript     {        \"status\": \"success\",        \"data\": {           \"books\": [            {              \"id\": \"Qbax5Oy7L8WKf74l\",              \"name\": \"Buku A\",              \"publisher\": \"Dicoding Indonesia\"            },",
  "main": "index.js",
  "scripts": {
    "start": "nodemon./src/server.js",
    "lint": "eslint./"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@hapi/hapi": "^20.1.3",
    "express": "^4.18.2",
    "nanoid": "^3.1.23"
  },
  "devDependencies": {
    "eslint": "^7.28.0",
    "eslint-config-google": "^0.14.0",
    "nodemon": "^2.0.7"
  }
}
